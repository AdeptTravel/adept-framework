// components/auth/widgets/login_form.go
//
// Widget: auth/login
//
// This widget renders the login form for the Auth component by delegating to
// the Forms subsystem.  Templates embed it with:
//
//	{{ widget "auth/login" (dict "prefill" .FormPrefill) }}
//
// Responsibilities
// ----------------
//   - Call form.RenderForm with the form ID "auth/login".
//   - Pass through any optional "prefill" map so previously-submitted values
//     re-populate on validation errors.
//   - Always return view.CacheSkip (converted to int) because the rendered form
//     contains a one-time CSRF token and must never be fragment-cached.
//
// Interface
// ---------
// The projectâ€™s widget system uses the following interface:
//
//	type Widget interface {
//	    ID() string
//	    Render(ctx any, params map[string]any) (html string, cache int, err error)
//	}
//
// Therefore Render returns (string, int, error) rather than template.HTML.
package widgets

import (
	"github.com/yanizio/adept/internal/form"
	"github.com/yanizio/adept/internal/view"
	"github.com/yanizio/adept/internal/widget"
)

// Compile-time assertion: LoginFormWidget satisfies widget.Widget.
var _ widget.Widget = (*LoginFormWidget)(nil)

// LoginFormWidget implements widget.Widget for ID "auth/login".
type LoginFormWidget struct{}

// ID returns the registry key so templates can reference the widget.
func (LoginFormWidget) ID() string { return "auth/login" }

// Render outputs the HTML generated by the Forms subsystem and disables
// fragment caching by returning view.CacheSkip.
func (LoginFormWidget) Render(_ any, params map[string]any) (string, int, error) {
	// Optional previously-submitted values.
	var prefill map[string]string
	if v, ok := params["prefill"].(map[string]string); ok {
		prefill = v
	}

	html, err := form.RenderForm(
		"auth/login",
		form.RenderOptions{Prefill: prefill},
	)
	if err != nil {
		return "", int(view.CacheSkip), err
	}

	return string(html), int(view.CacheSkip), nil
}

// Register the widget at package init.
func init() { widget.Register(LoginFormWidget{}) }
